//
// Generated file, do not edit! Created by opp_msgtool 6.0 from ReputationMessage.msg.
//

#ifndef __VEINS_REPUTATIONMESSAGE_M_H
#define __VEINS_REPUTATIONMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace veins {

class ReputationMessage;

}  // namespace veins

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "Block_m.h" // import Block

#include "ReputationMessageType_m.h" // import ReputationMessageType


namespace veins {

/**
 * Class generated from <tt>ReputationMessage.msg:26</tt> by opp_msgtool.
 * <pre>
 * packet ReputationMessage extends BaseFrame1609_4
 * {
 *     int peer;
 *     Block block;
 *     ReputationMessageType messageType;
 * }
 * </pre>
 */
class ReputationMessage : public ::veins::BaseFrame1609_4
{
  protected:
    int peer = 0;
    ::Block block;
    ::ReputationMessageType messageType = static_cast<ReputationMessageType>(-1);

  private:
    void copy(const ReputationMessage& other);

  protected:
    bool operator==(const ReputationMessage&) = delete;

  public:
    ReputationMessage(const char *name=nullptr, short kind=0);
    ReputationMessage(const ReputationMessage& other);
    virtual ~ReputationMessage();
    ReputationMessage& operator=(const ReputationMessage& other);
    virtual ReputationMessage *dup() const override {return new ReputationMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getPeer() const;
    virtual void setPeer(int peer);

    virtual const ::Block& getBlock() const;
    virtual ::Block& getBlockForUpdate() { return const_cast<::Block&>(const_cast<ReputationMessage*>(this)->getBlock());}
    virtual void setBlock(const ::Block& block);

    virtual ::ReputationMessageType getMessageType() const;
    virtual void setMessageType(::ReputationMessageType messageType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ReputationMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ReputationMessage& obj) {obj.parsimUnpack(b);}


}  // namespace veins


namespace omnetpp {

template<> inline veins::ReputationMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<veins::ReputationMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VEINS_REPUTATIONMESSAGE_M_H

